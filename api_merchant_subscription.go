/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// MerchantSubscriptionAPIService MerchantSubscriptionAPI service
type MerchantSubscriptionAPIService service

type ApiMerchantSubscriptionAddNewTrialStartPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionAddNewTrialStartReq *UnibeeApiMerchantSubscriptionAddNewTrialStartReq
}

func (r ApiMerchantSubscriptionAddNewTrialStartPostRequest) UnibeeApiMerchantSubscriptionAddNewTrialStartReq(unibeeApiMerchantSubscriptionAddNewTrialStartReq UnibeeApiMerchantSubscriptionAddNewTrialStartReq) ApiMerchantSubscriptionAddNewTrialStartPostRequest {
	r.unibeeApiMerchantSubscriptionAddNewTrialStartReq = &unibeeApiMerchantSubscriptionAddNewTrialStartReq
	return r
}

func (r ApiMerchantSubscriptionAddNewTrialStartPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionAddNewTrialStartPostExecute(r)
}

/*
MerchantSubscriptionAddNewTrialStartPost Merchant Edit Subscription-add appendTrialEndHour For Free

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionAddNewTrialStartPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionAddNewTrialStartPost(ctx context.Context) ApiMerchantSubscriptionAddNewTrialStartPostRequest {
	return ApiMerchantSubscriptionAddNewTrialStartPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionAddNewTrialStartPostExecute(r ApiMerchantSubscriptionAddNewTrialStartPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionAddNewTrialStartPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/add_new_trial_start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionAddNewTrialStartReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionAddNewTrialStartReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionAddNewTrialStartReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionCancelAtPeriodEndPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionCancelAtPeriodEndReq *UnibeeApiMerchantSubscriptionCancelAtPeriodEndReq
}

func (r ApiMerchantSubscriptionCancelAtPeriodEndPostRequest) UnibeeApiMerchantSubscriptionCancelAtPeriodEndReq(unibeeApiMerchantSubscriptionCancelAtPeriodEndReq UnibeeApiMerchantSubscriptionCancelAtPeriodEndReq) ApiMerchantSubscriptionCancelAtPeriodEndPostRequest {
	r.unibeeApiMerchantSubscriptionCancelAtPeriodEndReq = &unibeeApiMerchantSubscriptionCancelAtPeriodEndReq
	return r
}

func (r ApiMerchantSubscriptionCancelAtPeriodEndPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionCancelAtPeriodEndPostExecute(r)
}

/*
MerchantSubscriptionCancelAtPeriodEndPost Merchant Edit Subscription-Set Cancel Ad Period End

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionCancelAtPeriodEndPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelAtPeriodEndPost(ctx context.Context) ApiMerchantSubscriptionCancelAtPeriodEndPostRequest {
	return ApiMerchantSubscriptionCancelAtPeriodEndPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelAtPeriodEndPostExecute(r ApiMerchantSubscriptionCancelAtPeriodEndPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionCancelAtPeriodEndPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/cancel_at_period_end"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionCancelAtPeriodEndReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionCancelAtPeriodEndReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionCancelAtPeriodEndReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq *UnibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq
}

func (r ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest) UnibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq(unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq UnibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq) ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest {
	r.unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq = &unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq
	return r
}

func (r ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionCancelLastCancelAtPeriodEndPostExecute(r)
}

/*
MerchantSubscriptionCancelLastCancelAtPeriodEndPost Merchant Edit Subscription-Cancel Last CancelAtPeriod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelLastCancelAtPeriodEndPost(ctx context.Context) ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest {
	return ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelLastCancelAtPeriodEndPostExecute(r ApiMerchantSubscriptionCancelLastCancelAtPeriodEndPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionCancelLastCancelAtPeriodEndPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/cancel_last_cancel_at_period_end"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionCancelLastCancelAtPeriodEndReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionCancelPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionCancelReq *UnibeeApiMerchantSubscriptionCancelReq
}

func (r ApiMerchantSubscriptionCancelPostRequest) UnibeeApiMerchantSubscriptionCancelReq(unibeeApiMerchantSubscriptionCancelReq UnibeeApiMerchantSubscriptionCancelReq) ApiMerchantSubscriptionCancelPostRequest {
	r.unibeeApiMerchantSubscriptionCancelReq = &unibeeApiMerchantSubscriptionCancelReq
	return r
}

func (r ApiMerchantSubscriptionCancelPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionCancelPostExecute(r)
}

/*
MerchantSubscriptionCancelPost Merchant Cancel Subscription Immediately (Will Not Generate Proration Invoice)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionCancelPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelPost(ctx context.Context) ApiMerchantSubscriptionCancelPostRequest {
	return ApiMerchantSubscriptionCancelPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionCancelPostExecute(r ApiMerchantSubscriptionCancelPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionCancelPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/cancel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionCancelReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionCancelReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionCancelReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionDetailGetRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	subscriptionId *string
}

// SubscriptionId
func (r ApiMerchantSubscriptionDetailGetRequest) SubscriptionId(subscriptionId string) ApiMerchantSubscriptionDetailGetRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiMerchantSubscriptionDetailGetRequest) Execute() (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionDetailGetExecute(r)
}

/*
MerchantSubscriptionDetailGet Subscription Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionDetailGetRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionDetailGet(ctx context.Context) ApiMerchantSubscriptionDetailGetRequest {
	return ApiMerchantSubscriptionDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionDetailGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionDetailGetExecute(r ApiMerchantSubscriptionDetailGetRequest) (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionId == nil {
		return localVarReturnValue, nil, reportError("subscriptionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionDetailPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionDetailReq *UnibeeApiMerchantSubscriptionDetailReq
}

func (r ApiMerchantSubscriptionDetailPostRequest) UnibeeApiMerchantSubscriptionDetailReq(unibeeApiMerchantSubscriptionDetailReq UnibeeApiMerchantSubscriptionDetailReq) ApiMerchantSubscriptionDetailPostRequest {
	r.unibeeApiMerchantSubscriptionDetailReq = &unibeeApiMerchantSubscriptionDetailReq
	return r
}

func (r ApiMerchantSubscriptionDetailPostRequest) Execute() (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionDetailPostExecute(r)
}

/*
MerchantSubscriptionDetailPost Subscription Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionDetailPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionDetailPost(ctx context.Context) ApiMerchantSubscriptionDetailPostRequest {
	return ApiMerchantSubscriptionDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionDetailGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionDetailPostExecute(r ApiMerchantSubscriptionDetailPostRequest) (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionListGetRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	userId *int64
	status *[]int32
	sortField *string
	sortType *string
	page *int32
	count *int32
}

// UserId
func (r ApiMerchantSubscriptionListGetRequest) UserId(userId int64) ApiMerchantSubscriptionListGetRequest {
	r.userId = &userId
	return r
}

// Filter, Default All，Status，0-Init | 1-Create｜2-Active｜3-Suspend | 4-Cancel | 5-Expire
func (r ApiMerchantSubscriptionListGetRequest) Status(status []int32) ApiMerchantSubscriptionListGetRequest {
	r.status = &status
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r ApiMerchantSubscriptionListGetRequest) SortField(sortField string) ApiMerchantSubscriptionListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r ApiMerchantSubscriptionListGetRequest) SortType(sortType string) ApiMerchantSubscriptionListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start WIth 0
func (r ApiMerchantSubscriptionListGetRequest) Page(page int32) ApiMerchantSubscriptionListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r ApiMerchantSubscriptionListGetRequest) Count(count int32) ApiMerchantSubscriptionListGetRequest {
	r.count = &count
	return r
}

func (r ApiMerchantSubscriptionListGetRequest) Execute() (*MerchantSubscriptionListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionListGetExecute(r)
}

/*
MerchantSubscriptionListGet Subscription List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionListGetRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionListGet(ctx context.Context) ApiMerchantSubscriptionListGetRequest {
	return ApiMerchantSubscriptionListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionListGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionListGetExecute(r ApiMerchantSubscriptionListGetRequest) (*MerchantSubscriptionListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionListPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionListReq *UnibeeApiMerchantSubscriptionListReq
}

func (r ApiMerchantSubscriptionListPostRequest) UnibeeApiMerchantSubscriptionListReq(unibeeApiMerchantSubscriptionListReq UnibeeApiMerchantSubscriptionListReq) ApiMerchantSubscriptionListPostRequest {
	r.unibeeApiMerchantSubscriptionListReq = &unibeeApiMerchantSubscriptionListReq
	return r
}

func (r ApiMerchantSubscriptionListPostRequest) Execute() (*MerchantSubscriptionListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionListPostExecute(r)
}

/*
MerchantSubscriptionListPost Subscription List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionListPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionListPost(ctx context.Context) ApiMerchantSubscriptionListPostRequest {
	return ApiMerchantSubscriptionListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionListGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionListPostExecute(r ApiMerchantSubscriptionListPostRequest) (*MerchantSubscriptionListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionResumePostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionResumeReq *UnibeeApiMerchantSubscriptionResumeReq
}

func (r ApiMerchantSubscriptionResumePostRequest) UnibeeApiMerchantSubscriptionResumeReq(unibeeApiMerchantSubscriptionResumeReq UnibeeApiMerchantSubscriptionResumeReq) ApiMerchantSubscriptionResumePostRequest {
	r.unibeeApiMerchantSubscriptionResumeReq = &unibeeApiMerchantSubscriptionResumeReq
	return r
}

func (r ApiMerchantSubscriptionResumePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionResumePostExecute(r)
}

/*
MerchantSubscriptionResumePost Merchant Edit Subscription-Resume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionResumePostRequest

Deprecated
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionResumePost(ctx context.Context) ApiMerchantSubscriptionResumePostRequest {
	return ApiMerchantSubscriptionResumePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
// Deprecated
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionResumePostExecute(r ApiMerchantSubscriptionResumePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionResumePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/resume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionResumeReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionResumeReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionResumeReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionSuspendPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionSuspendReq *UnibeeApiMerchantSubscriptionSuspendReq
}

func (r ApiMerchantSubscriptionSuspendPostRequest) UnibeeApiMerchantSubscriptionSuspendReq(unibeeApiMerchantSubscriptionSuspendReq UnibeeApiMerchantSubscriptionSuspendReq) ApiMerchantSubscriptionSuspendPostRequest {
	r.unibeeApiMerchantSubscriptionSuspendReq = &unibeeApiMerchantSubscriptionSuspendReq
	return r
}

func (r ApiMerchantSubscriptionSuspendPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionSuspendPostExecute(r)
}

/*
MerchantSubscriptionSuspendPost Merchant Edit Subscription-Stop

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionSuspendPostRequest

Deprecated
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionSuspendPost(ctx context.Context) ApiMerchantSubscriptionSuspendPostRequest {
	return ApiMerchantSubscriptionSuspendPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
// Deprecated
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionSuspendPostExecute(r ApiMerchantSubscriptionSuspendPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionSuspendPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/suspend"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionSuspendReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionSuspendReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionSuspendReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionUpdatePreviewPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionUpdatePreviewReq *UnibeeApiMerchantSubscriptionUpdatePreviewReq
}

func (r ApiMerchantSubscriptionUpdatePreviewPostRequest) UnibeeApiMerchantSubscriptionUpdatePreviewReq(unibeeApiMerchantSubscriptionUpdatePreviewReq UnibeeApiMerchantSubscriptionUpdatePreviewReq) ApiMerchantSubscriptionUpdatePreviewPostRequest {
	r.unibeeApiMerchantSubscriptionUpdatePreviewReq = &unibeeApiMerchantSubscriptionUpdatePreviewReq
	return r
}

func (r ApiMerchantSubscriptionUpdatePreviewPostRequest) Execute() (*MerchantSubscriptionUpdatePreviewPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionUpdatePreviewPostExecute(r)
}

/*
MerchantSubscriptionUpdatePreviewPost Merchant Update Subscription Preview

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionUpdatePreviewPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUpdatePreviewPost(ctx context.Context) ApiMerchantSubscriptionUpdatePreviewPostRequest {
	return ApiMerchantSubscriptionUpdatePreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionUpdatePreviewPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUpdatePreviewPostExecute(r ApiMerchantSubscriptionUpdatePreviewPostRequest) (*MerchantSubscriptionUpdatePreviewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionUpdatePreviewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionUpdatePreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/update_preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionUpdatePreviewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionUpdatePreviewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionUpdatePreviewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionUpdateSubmitPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionUpdateReq *UnibeeApiMerchantSubscriptionUpdateReq
}

func (r ApiMerchantSubscriptionUpdateSubmitPostRequest) UnibeeApiMerchantSubscriptionUpdateReq(unibeeApiMerchantSubscriptionUpdateReq UnibeeApiMerchantSubscriptionUpdateReq) ApiMerchantSubscriptionUpdateSubmitPostRequest {
	r.unibeeApiMerchantSubscriptionUpdateReq = &unibeeApiMerchantSubscriptionUpdateReq
	return r
}

func (r ApiMerchantSubscriptionUpdateSubmitPostRequest) Execute() (*MerchantSubscriptionUpdateSubmitPost200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionUpdateSubmitPostExecute(r)
}

/*
MerchantSubscriptionUpdateSubmitPost Merchant Update Subscription Submit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionUpdateSubmitPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUpdateSubmitPost(ctx context.Context) ApiMerchantSubscriptionUpdateSubmitPostRequest {
	return ApiMerchantSubscriptionUpdateSubmitPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionUpdateSubmitPost200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUpdateSubmitPostExecute(r ApiMerchantSubscriptionUpdateSubmitPostRequest) (*MerchantSubscriptionUpdateSubmitPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionUpdateSubmitPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionUpdateSubmitPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/update_submit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionUpdateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionUpdateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionUpdateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionUserSubscriptionDetailGetRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	userId *int64
}

// UserId
func (r ApiMerchantSubscriptionUserSubscriptionDetailGetRequest) UserId(userId int64) ApiMerchantSubscriptionUserSubscriptionDetailGetRequest {
	r.userId = &userId
	return r
}

func (r ApiMerchantSubscriptionUserSubscriptionDetailGetRequest) Execute() (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionUserSubscriptionDetailGetExecute(r)
}

/*
MerchantSubscriptionUserSubscriptionDetailGet Subscription Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionUserSubscriptionDetailGetRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUserSubscriptionDetailGet(ctx context.Context) ApiMerchantSubscriptionUserSubscriptionDetailGetRequest {
	return ApiMerchantSubscriptionUserSubscriptionDetailGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionDetailGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUserSubscriptionDetailGetExecute(r ApiMerchantSubscriptionUserSubscriptionDetailGetRequest) (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionUserSubscriptionDetailGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/user_subscription_detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionUserSubscriptionDetailPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionAPIService
	unibeeApiMerchantSubscriptionUserSubscriptionDetailReq *UnibeeApiMerchantSubscriptionUserSubscriptionDetailReq
}

func (r ApiMerchantSubscriptionUserSubscriptionDetailPostRequest) UnibeeApiMerchantSubscriptionUserSubscriptionDetailReq(unibeeApiMerchantSubscriptionUserSubscriptionDetailReq UnibeeApiMerchantSubscriptionUserSubscriptionDetailReq) ApiMerchantSubscriptionUserSubscriptionDetailPostRequest {
	r.unibeeApiMerchantSubscriptionUserSubscriptionDetailReq = &unibeeApiMerchantSubscriptionUserSubscriptionDetailReq
	return r
}

func (r ApiMerchantSubscriptionUserSubscriptionDetailPostRequest) Execute() (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionUserSubscriptionDetailPostExecute(r)
}

/*
MerchantSubscriptionUserSubscriptionDetailPost Subscription Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionUserSubscriptionDetailPostRequest
*/
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUserSubscriptionDetailPost(ctx context.Context) ApiMerchantSubscriptionUserSubscriptionDetailPostRequest {
	return ApiMerchantSubscriptionUserSubscriptionDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionDetailGet200Response
func (a *MerchantSubscriptionAPIService) MerchantSubscriptionUserSubscriptionDetailPostExecute(r ApiMerchantSubscriptionUserSubscriptionDetailPostRequest) (*MerchantSubscriptionDetailGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionDetailGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionAPIService.MerchantSubscriptionUserSubscriptionDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/user_subscription_detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionUserSubscriptionDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionUserSubscriptionDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionUserSubscriptionDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
