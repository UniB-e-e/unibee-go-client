/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MerchantSubscriptionPendingUpdateAPIService MerchantSubscriptionPendingUpdateAPI service
type MerchantSubscriptionPendingUpdateAPIService service

type ApiMerchantSubscriptionPendingUpdateListGetRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionPendingUpdateAPIService
	subscriptionId *string
	sortField *string
	sortType *string
	page *int32
	count *int32
}

// SubscriptionId
func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) SubscriptionId(subscriptionId string) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	r.subscriptionId = &subscriptionId
	return r
}

// Sort Field，gmt_create|gmt_modify，Default gmt_modify
func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) SortField(sortField string) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) SortType(sortType string) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	r.sortType = &sortType
	return r
}

// Page, Start WIth 0
func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) Page(page int32) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) Count(count int32) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	r.count = &count
	return r
}

func (r ApiMerchantSubscriptionPendingUpdateListGetRequest) Execute() (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionPendingUpdateListGetExecute(r)
}

/*
MerchantSubscriptionPendingUpdateListGet Merchant SubscriptionPendingUpdate List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionPendingUpdateListGetRequest
*/
func (a *MerchantSubscriptionPendingUpdateAPIService) MerchantSubscriptionPendingUpdateListGet(ctx context.Context) ApiMerchantSubscriptionPendingUpdateListGetRequest {
	return ApiMerchantSubscriptionPendingUpdateListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPendingUpdateListGet200Response
func (a *MerchantSubscriptionPendingUpdateAPIService) MerchantSubscriptionPendingUpdateListGetExecute(r ApiMerchantSubscriptionPendingUpdateListGetRequest) (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPendingUpdateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionPendingUpdateAPIService.MerchantSubscriptionPendingUpdateListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/pending_update_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionId == nil {
		return localVarReturnValue, nil, reportError("subscriptionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "")
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMerchantSubscriptionPendingUpdateListPostRequest struct {
	ctx context.Context
	ApiService *MerchantSubscriptionPendingUpdateAPIService
	unibeeApiMerchantSubscriptionPendingUpdateListReq *UnibeeApiMerchantSubscriptionPendingUpdateListReq
}

func (r ApiMerchantSubscriptionPendingUpdateListPostRequest) UnibeeApiMerchantSubscriptionPendingUpdateListReq(unibeeApiMerchantSubscriptionPendingUpdateListReq UnibeeApiMerchantSubscriptionPendingUpdateListReq) ApiMerchantSubscriptionPendingUpdateListPostRequest {
	r.unibeeApiMerchantSubscriptionPendingUpdateListReq = &unibeeApiMerchantSubscriptionPendingUpdateListReq
	return r
}

func (r ApiMerchantSubscriptionPendingUpdateListPostRequest) Execute() (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantSubscriptionPendingUpdateListPostExecute(r)
}

/*
MerchantSubscriptionPendingUpdateListPost Merchant SubscriptionPendingUpdate List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMerchantSubscriptionPendingUpdateListPostRequest
*/
func (a *MerchantSubscriptionPendingUpdateAPIService) MerchantSubscriptionPendingUpdateListPost(ctx context.Context) ApiMerchantSubscriptionPendingUpdateListPostRequest {
	return ApiMerchantSubscriptionPendingUpdateListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantSubscriptionPendingUpdateListGet200Response
func (a *MerchantSubscriptionPendingUpdateAPIService) MerchantSubscriptionPendingUpdateListPostExecute(r ApiMerchantSubscriptionPendingUpdateListPostRequest) (*MerchantSubscriptionPendingUpdateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantSubscriptionPendingUpdateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantSubscriptionPendingUpdateAPIService.MerchantSubscriptionPendingUpdateListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/subscription/pending_update_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantSubscriptionPendingUpdateListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantSubscriptionPendingUpdateListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantSubscriptionPendingUpdateListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
