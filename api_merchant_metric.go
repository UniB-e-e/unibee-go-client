/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MerchantMetricAPIService MerchantMetricAPI service
type MerchantMetricAPIService service

type MerchantMetricAPIMerchantMetricDeletePostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricDeleteReq *UnibeeApiMerchantMetricDeleteReq
}

func (r MerchantMetricAPIMerchantMetricDeletePostRequest) UnibeeApiMerchantMetricDeleteReq(unibeeApiMerchantMetricDeleteReq UnibeeApiMerchantMetricDeleteReq) MerchantMetricAPIMerchantMetricDeletePostRequest {
	r.unibeeApiMerchantMetricDeleteReq = &unibeeApiMerchantMetricDeleteReq
	return r
}

func (r MerchantMetricAPIMerchantMetricDeletePostRequest) Execute() (*MerchantMetricDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricDeletePostExecute(r)
}

/*
MerchantMetricDeletePost Delete Merchant Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricDeletePostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricDeletePost(ctx context.Context) MerchantMetricAPIMerchantMetricDeletePostRequest {
	return MerchantMetricAPIMerchantMetricDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricDeletePostExecute(r MerchantMetricAPIMerchantMetricDeletePostRequest) (*MerchantMetricDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDeleteReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDeleteReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDeleteReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricDetailPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricDetailReq *UnibeeApiMerchantMetricDetailReq
}

func (r MerchantMetricAPIMerchantMetricDetailPostRequest) UnibeeApiMerchantMetricDetailReq(unibeeApiMerchantMetricDetailReq UnibeeApiMerchantMetricDetailReq) MerchantMetricAPIMerchantMetricDetailPostRequest {
	r.unibeeApiMerchantMetricDetailReq = &unibeeApiMerchantMetricDetailReq
	return r
}

func (r MerchantMetricAPIMerchantMetricDetailPostRequest) Execute() (*MerchantMetricDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricDetailPostExecute(r)
}

/*
MerchantMetricDetailPost Merchant Metric Detail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricDetailPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricDetailPost(ctx context.Context) MerchantMetricAPIMerchantMetricDetailPostRequest {
	return MerchantMetricAPIMerchantMetricDetailPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricDetailPostExecute(r MerchantMetricAPIMerchantMetricDetailPostRequest) (*MerchantMetricDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricDetailPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/detail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDetailReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDetailReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDetailReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricEditPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricEditReq *UnibeeApiMerchantMetricEditReq
}

func (r MerchantMetricAPIMerchantMetricEditPostRequest) UnibeeApiMerchantMetricEditReq(unibeeApiMerchantMetricEditReq UnibeeApiMerchantMetricEditReq) MerchantMetricAPIMerchantMetricEditPostRequest {
	r.unibeeApiMerchantMetricEditReq = &unibeeApiMerchantMetricEditReq
	return r
}

func (r MerchantMetricAPIMerchantMetricEditPostRequest) Execute() (*MerchantMetricDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricEditPostExecute(r)
}

/*
MerchantMetricEditPost Edit Merchant Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricEditPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricEditPost(ctx context.Context) MerchantMetricAPIMerchantMetricEditPostRequest {
	return MerchantMetricAPIMerchantMetricEditPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricEditPostExecute(r MerchantMetricAPIMerchantMetricEditPostRequest) (*MerchantMetricDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricEditPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/edit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricEditReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricEditReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricEditReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricEventDeletePostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricDeleteEventReq *UnibeeApiMerchantMetricDeleteEventReq
}

func (r MerchantMetricAPIMerchantMetricEventDeletePostRequest) UnibeeApiMerchantMetricDeleteEventReq(unibeeApiMerchantMetricDeleteEventReq UnibeeApiMerchantMetricDeleteEventReq) MerchantMetricAPIMerchantMetricEventDeletePostRequest {
	r.unibeeApiMerchantMetricDeleteEventReq = &unibeeApiMerchantMetricDeleteEventReq
	return r
}

func (r MerchantMetricAPIMerchantMetricEventDeletePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricEventDeletePostExecute(r)
}

/*
MerchantMetricEventDeletePost Del Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricEventDeletePostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricEventDeletePost(ctx context.Context) MerchantMetricAPIMerchantMetricEventDeletePostRequest {
	return MerchantMetricAPIMerchantMetricEventDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantMetricAPIService) MerchantMetricEventDeletePostExecute(r MerchantMetricAPIMerchantMetricEventDeletePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricEventDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDeleteEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDeleteEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDeleteEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricEventNewPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricNewEventReq *UnibeeApiMerchantMetricNewEventReq
}

func (r MerchantMetricAPIMerchantMetricEventNewPostRequest) UnibeeApiMerchantMetricNewEventReq(unibeeApiMerchantMetricNewEventReq UnibeeApiMerchantMetricNewEventReq) MerchantMetricAPIMerchantMetricEventNewPostRequest {
	r.unibeeApiMerchantMetricNewEventReq = &unibeeApiMerchantMetricNewEventReq
	return r
}

func (r MerchantMetricAPIMerchantMetricEventNewPostRequest) Execute() (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricEventNewPostExecute(r)
}

/*
MerchantMetricEventNewPost Merchant Metric Event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricEventNewPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricEventNewPost(ctx context.Context) MerchantMetricAPIMerchantMetricEventNewPostRequest {
	return MerchantMetricAPIMerchantMetricEventNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricEventNewPost200Response
func (a *MerchantMetricAPIService) MerchantMetricEventNewPostExecute(r MerchantMetricAPIMerchantMetricEventNewPostRequest) (*MerchantMetricEventNewPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricEventNewPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricEventNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/event/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricNewEventReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricNewEventReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricNewEventReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricListGetRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
}

func (r MerchantMetricAPIMerchantMetricListGetRequest) Execute() (*MerchantMetricListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricListGetExecute(r)
}

/*
MerchantMetricListGet Merchant Metric list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricListGetRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricListGet(ctx context.Context) MerchantMetricAPIMerchantMetricListGetRequest {
	return MerchantMetricAPIMerchantMetricListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricListGet200Response
func (a *MerchantMetricAPIService) MerchantMetricListGetExecute(r MerchantMetricAPIMerchantMetricListGetRequest) (*MerchantMetricListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricNewPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricNewReq *UnibeeApiMerchantMetricNewReq
}

func (r MerchantMetricAPIMerchantMetricNewPostRequest) UnibeeApiMerchantMetricNewReq(unibeeApiMerchantMetricNewReq UnibeeApiMerchantMetricNewReq) MerchantMetricAPIMerchantMetricNewPostRequest {
	r.unibeeApiMerchantMetricNewReq = &unibeeApiMerchantMetricNewReq
	return r
}

func (r MerchantMetricAPIMerchantMetricNewPostRequest) Execute() (*MerchantMetricDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricNewPostExecute(r)
}

/*
MerchantMetricNewPost New Merchant Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricNewPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricNewPost(ctx context.Context) MerchantMetricAPIMerchantMetricNewPostRequest {
	return MerchantMetricAPIMerchantMetricNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricNewPostExecute(r MerchantMetricAPIMerchantMetricNewPostRequest) (*MerchantMetricDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricNewReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricNewReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricNewReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricDeletePlanLimitReq *UnibeeApiMerchantMetricDeletePlanLimitReq
}

func (r MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest) UnibeeApiMerchantMetricDeletePlanLimitReq(unibeeApiMerchantMetricDeletePlanLimitReq UnibeeApiMerchantMetricDeletePlanLimitReq) MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest {
	r.unibeeApiMerchantMetricDeletePlanLimitReq = &unibeeApiMerchantMetricDeletePlanLimitReq
	return r
}

func (r MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest) Execute() (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricPlanLimitDeletePostExecute(r)
}

/*
MerchantMetricPlanLimitDeletePost Delete Merchant Metric Plan TotalLimit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitDeletePost(ctx context.Context) MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest {
	return MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricPlanLimitDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitDeletePostExecute(r MerchantMetricAPIMerchantMetricPlanLimitDeletePostRequest) (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricPlanLimitDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricPlanLimitDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/plan/limit/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricDeletePlanLimitReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricDeletePlanLimitReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricDeletePlanLimitReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricEditPlanLimitReq *UnibeeApiMerchantMetricEditPlanLimitReq
}

func (r MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest) UnibeeApiMerchantMetricEditPlanLimitReq(unibeeApiMerchantMetricEditPlanLimitReq UnibeeApiMerchantMetricEditPlanLimitReq) MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest {
	r.unibeeApiMerchantMetricEditPlanLimitReq = &unibeeApiMerchantMetricEditPlanLimitReq
	return r
}

func (r MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest) Execute() (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricPlanLimitEditPostExecute(r)
}

/*
MerchantMetricPlanLimitEditPost Edit Merchant Metric Plan TotalLimit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitEditPost(ctx context.Context) MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest {
	return MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricPlanLimitDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitEditPostExecute(r MerchantMetricAPIMerchantMetricPlanLimitEditPostRequest) (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricPlanLimitDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricPlanLimitEditPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/plan/limit/edit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricEditPlanLimitReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricEditPlanLimitReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricEditPlanLimitReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricNewPlanLimitReq *UnibeeApiMerchantMetricNewPlanLimitReq
}

func (r MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest) UnibeeApiMerchantMetricNewPlanLimitReq(unibeeApiMerchantMetricNewPlanLimitReq UnibeeApiMerchantMetricNewPlanLimitReq) MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest {
	r.unibeeApiMerchantMetricNewPlanLimitReq = &unibeeApiMerchantMetricNewPlanLimitReq
	return r
}

func (r MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest) Execute() (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricPlanLimitNewPostExecute(r)
}

/*
MerchantMetricPlanLimitNewPost New Merchant Metric Plan TotalLimit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitNewPost(ctx context.Context) MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest {
	return MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricPlanLimitDeletePost200Response
func (a *MerchantMetricAPIService) MerchantMetricPlanLimitNewPostExecute(r MerchantMetricAPIMerchantMetricPlanLimitNewPostRequest) (*MerchantMetricPlanLimitDeletePost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricPlanLimitDeletePost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricPlanLimitNewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/plan/limit/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricNewPlanLimitReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricNewPlanLimitReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricNewPlanLimitReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricUserStatGetRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	userId *int64
	externalUserId *string
}

// UserId, One Of UserId|ExternalUserId Needed
func (r MerchantMetricAPIMerchantMetricUserStatGetRequest) UserId(userId int64) MerchantMetricAPIMerchantMetricUserStatGetRequest {
	r.userId = &userId
	return r
}

// ExternalUserId, One Of UserId|ExternalUserId Needed
func (r MerchantMetricAPIMerchantMetricUserStatGetRequest) ExternalUserId(externalUserId string) MerchantMetricAPIMerchantMetricUserStatGetRequest {
	r.externalUserId = &externalUserId
	return r
}

func (r MerchantMetricAPIMerchantMetricUserStatGetRequest) Execute() (*MerchantMetricUserStatGet200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricUserStatGetExecute(r)
}

/*
MerchantMetricUserStatGet Query User Metric Stat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricUserStatGetRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricUserStatGet(ctx context.Context) MerchantMetricAPIMerchantMetricUserStatGetRequest {
	return MerchantMetricAPIMerchantMetricUserStatGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricUserStatGet200Response
func (a *MerchantMetricAPIService) MerchantMetricUserStatGetExecute(r MerchantMetricAPIMerchantMetricUserStatGetRequest) (*MerchantMetricUserStatGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricUserStatGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricUserStatGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/user/stat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.externalUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalUserId", r.externalUserId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantMetricAPIMerchantMetricUserStatPostRequest struct {
	ctx context.Context
	ApiService *MerchantMetricAPIService
	unibeeApiMerchantMetricUserStatReq *UnibeeApiMerchantMetricUserStatReq
}

func (r MerchantMetricAPIMerchantMetricUserStatPostRequest) UnibeeApiMerchantMetricUserStatReq(unibeeApiMerchantMetricUserStatReq UnibeeApiMerchantMetricUserStatReq) MerchantMetricAPIMerchantMetricUserStatPostRequest {
	r.unibeeApiMerchantMetricUserStatReq = &unibeeApiMerchantMetricUserStatReq
	return r
}

func (r MerchantMetricAPIMerchantMetricUserStatPostRequest) Execute() (*MerchantMetricUserStatGet200Response, *http.Response, error) {
	return r.ApiService.MerchantMetricUserStatPostExecute(r)
}

/*
MerchantMetricUserStatPost Query User Metric Stat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantMetricAPIMerchantMetricUserStatPostRequest
*/
func (a *MerchantMetricAPIService) MerchantMetricUserStatPost(ctx context.Context) MerchantMetricAPIMerchantMetricUserStatPostRequest {
	return MerchantMetricAPIMerchantMetricUserStatPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantMetricUserStatGet200Response
func (a *MerchantMetricAPIService) MerchantMetricUserStatPostExecute(r MerchantMetricAPIMerchantMetricUserStatPostRequest) (*MerchantMetricUserStatGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantMetricUserStatGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantMetricAPIService.MerchantMetricUserStatPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/metric/user/stat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantMetricUserStatReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantMetricUserStatReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantMetricUserStatReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
