/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MerchantPaymentTimelineAPIService MerchantPaymentTimelineAPI service
type MerchantPaymentTimelineAPIService service

type MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest struct {
	ctx context.Context
	ApiService *MerchantPaymentTimelineAPIService
	userId *int32
	sortField *string
	sortType *string
	page *int32
	count *int32
}

// Filter UserId, Default All
func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) UserId(userId int32) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	r.userId = &userId
	return r
}

// Sort，invoice_id|gmt_create|gmt_modify|period_end|total_amount，Default gmt_modify
func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) SortField(sortField string) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	r.sortField = &sortField
	return r
}

// Sort Type，asc|desc，Default desc
func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) SortType(sortType string) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	r.sortType = &sortType
	return r
}

// Page,Start 0
func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) Page(page int32) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	r.page = &page
	return r
}

// Count Of Page
func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) Count(count int32) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	r.count = &count
	return r
}

func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) Execute() (*MerchantPaymentPaymentTimelineListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantPaymentPaymentTimelineListGetExecute(r)
}

/*
MerchantPaymentPaymentTimelineListGet Payment TimeLine List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest
*/
func (a *MerchantPaymentTimelineAPIService) MerchantPaymentPaymentTimelineListGet(ctx context.Context) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest {
	return MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantPaymentPaymentTimelineListGet200Response
func (a *MerchantPaymentTimelineAPIService) MerchantPaymentPaymentTimelineListGetExecute(r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListGetRequest) (*MerchantPaymentPaymentTimelineListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantPaymentPaymentTimelineListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantPaymentTimelineAPIService.MerchantPaymentPaymentTimelineListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/payment/payment_timeline_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortField", r.sortField, "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortType", r.sortType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest struct {
	ctx context.Context
	ApiService *MerchantPaymentTimelineAPIService
	unibeeApiMerchantPaymentTimeLineListReq *UnibeeApiMerchantPaymentTimeLineListReq
}

func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest) UnibeeApiMerchantPaymentTimeLineListReq(unibeeApiMerchantPaymentTimeLineListReq UnibeeApiMerchantPaymentTimeLineListReq) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest {
	r.unibeeApiMerchantPaymentTimeLineListReq = &unibeeApiMerchantPaymentTimeLineListReq
	return r
}

func (r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest) Execute() (*MerchantPaymentPaymentTimelineListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantPaymentPaymentTimelineListPostExecute(r)
}

/*
MerchantPaymentPaymentTimelineListPost Payment TimeLine List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest
*/
func (a *MerchantPaymentTimelineAPIService) MerchantPaymentPaymentTimelineListPost(ctx context.Context) MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest {
	return MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantPaymentPaymentTimelineListGet200Response
func (a *MerchantPaymentTimelineAPIService) MerchantPaymentPaymentTimelineListPostExecute(r MerchantPaymentTimelineAPIMerchantPaymentPaymentTimelineListPostRequest) (*MerchantPaymentPaymentTimelineListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantPaymentPaymentTimelineListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantPaymentTimelineAPIService.MerchantPaymentPaymentTimelineListPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/payment/payment_timeline_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantPaymentTimeLineListReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantPaymentTimeLineListReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantPaymentTimeLineListReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
