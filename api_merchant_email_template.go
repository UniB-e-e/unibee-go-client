/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MerchantEmailTemplateAPIService MerchantEmailTemplateAPI service
type MerchantEmailTemplateAPIService service

type MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest struct {
	ctx context.Context
	ApiService *MerchantEmailTemplateAPIService
	unibeeApiMerchantEmailTemplateActivateReq *UnibeeApiMerchantEmailTemplateActivateReq
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest) UnibeeApiMerchantEmailTemplateActivateReq(unibeeApiMerchantEmailTemplateActivateReq UnibeeApiMerchantEmailTemplateActivateReq) MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest {
	r.unibeeApiMerchantEmailTemplateActivateReq = &unibeeApiMerchantEmailTemplateActivateReq
	return r
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantEmailTemplateActivatePostExecute(r)
}

/*
MerchantEmailTemplateActivatePost Merchant Email Template Activate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest
*/
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateActivatePost(ctx context.Context) MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest {
	return MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateActivatePostExecute(r MerchantEmailTemplateAPIMerchantEmailTemplateActivatePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantEmailTemplateAPIService.MerchantEmailTemplateActivatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_activate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailTemplateActivateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailTemplateActivateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailTemplateActivateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest struct {
	ctx context.Context
	ApiService *MerchantEmailTemplateAPIService
	unibeeApiMerchantEmailTemplateDeactivateReq *UnibeeApiMerchantEmailTemplateDeactivateReq
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest) UnibeeApiMerchantEmailTemplateDeactivateReq(unibeeApiMerchantEmailTemplateDeactivateReq UnibeeApiMerchantEmailTemplateDeactivateReq) MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest {
	r.unibeeApiMerchantEmailTemplateDeactivateReq = &unibeeApiMerchantEmailTemplateDeactivateReq
	return r
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantEmailTemplateDeactivatePostExecute(r)
}

/*
MerchantEmailTemplateDeactivatePost Merchant Email Template Deactivate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest
*/
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateDeactivatePost(ctx context.Context) MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest {
	return MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateDeactivatePostExecute(r MerchantEmailTemplateAPIMerchantEmailTemplateDeactivatePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantEmailTemplateAPIService.MerchantEmailTemplateDeactivatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_deactivate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailTemplateDeactivateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailTemplateDeactivateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailTemplateDeactivateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest struct {
	ctx context.Context
	ApiService *MerchantEmailTemplateAPIService
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest) Execute() (*MerchantEmailTemplateListGet200Response, *http.Response, error) {
	return r.ApiService.MerchantEmailTemplateListGetExecute(r)
}

/*
MerchantEmailTemplateListGet Merchant Email Template List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest
*/
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateListGet(ctx context.Context) MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest {
	return MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantEmailTemplateListGet200Response
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateListGetExecute(r MerchantEmailTemplateAPIMerchantEmailTemplateListGetRequest) (*MerchantEmailTemplateListGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantEmailTemplateListGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantEmailTemplateAPIService.MerchantEmailTemplateListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest struct {
	ctx context.Context
	ApiService *MerchantEmailTemplateAPIService
	unibeeApiMerchantEmailTemplateSetDefaultReq *UnibeeApiMerchantEmailTemplateSetDefaultReq
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest) UnibeeApiMerchantEmailTemplateSetDefaultReq(unibeeApiMerchantEmailTemplateSetDefaultReq UnibeeApiMerchantEmailTemplateSetDefaultReq) MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest {
	r.unibeeApiMerchantEmailTemplateSetDefaultReq = &unibeeApiMerchantEmailTemplateSetDefaultReq
	return r
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantEmailTemplateSetDefaultPostExecute(r)
}

/*
MerchantEmailTemplateSetDefaultPost Merchant Email Template Set Default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest
*/
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateSetDefaultPost(ctx context.Context) MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest {
	return MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateSetDefaultPostExecute(r MerchantEmailTemplateAPIMerchantEmailTemplateSetDefaultPostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantEmailTemplateAPIService.MerchantEmailTemplateSetDefaultPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_set_default"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailTemplateSetDefaultReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailTemplateSetDefaultReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailTemplateSetDefaultReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest struct {
	ctx context.Context
	ApiService *MerchantEmailTemplateAPIService
	unibeeApiMerchantEmailTemplateUpdateReq *UnibeeApiMerchantEmailTemplateUpdateReq
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest) UnibeeApiMerchantEmailTemplateUpdateReq(unibeeApiMerchantEmailTemplateUpdateReq UnibeeApiMerchantEmailTemplateUpdateReq) MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest {
	r.unibeeApiMerchantEmailTemplateUpdateReq = &unibeeApiMerchantEmailTemplateUpdateReq
	return r
}

func (r MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest) Execute() (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	return r.ApiService.MerchantEmailTemplateUpdatePostExecute(r)
}

/*
MerchantEmailTemplateUpdatePost Merchant Email Template Update

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest
*/
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateUpdatePost(ctx context.Context) MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest {
	return MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantAuthSsoLoginOTPPost200Response
func (a *MerchantEmailTemplateAPIService) MerchantEmailTemplateUpdatePostExecute(r MerchantEmailTemplateAPIMerchantEmailTemplateUpdatePostRequest) (*MerchantAuthSsoLoginOTPPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantAuthSsoLoginOTPPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantEmailTemplateAPIService.MerchantEmailTemplateUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant/email/template_update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unibeeApiMerchantEmailTemplateUpdateReq == nil {
		return localVarReturnValue, nil, reportError("unibeeApiMerchantEmailTemplateUpdateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unibeeApiMerchantEmailTemplateUpdateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
