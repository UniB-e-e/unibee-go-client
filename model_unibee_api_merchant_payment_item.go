/*
OpenAPI UniBee

This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnibeeApiMerchantPaymentItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnibeeApiMerchantPaymentItem{}

// UnibeeApiMerchantPaymentItem struct for UnibeeApiMerchantPaymentItem
type UnibeeApiMerchantPaymentItem struct {
	// Description
	Description *string `json:"description,omitempty"`
	// ImageUrl
	ImageUrl *string `json:"imageUrl,omitempty"`
	// ProductUrl
	ProductUrl *string `json:"productUrl,omitempty"`
	// Quantity
	Quantity int64 `json:"quantity"`
	// TaxScale
	TaxScale int64 `json:"taxScale"`
	// UnitAmountExcludingTax
	UnitAmountExcludingTax int64 `json:"unitAmountExcludingTax"`
}

type _UnibeeApiMerchantPaymentItem UnibeeApiMerchantPaymentItem

// NewUnibeeApiMerchantPaymentItem instantiates a new UnibeeApiMerchantPaymentItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnibeeApiMerchantPaymentItem(quantity int64, taxScale int64, unitAmountExcludingTax int64) *UnibeeApiMerchantPaymentItem {
	this := UnibeeApiMerchantPaymentItem{}
	this.Quantity = quantity
	this.TaxScale = taxScale
	this.UnitAmountExcludingTax = unitAmountExcludingTax
	return &this
}

// NewUnibeeApiMerchantPaymentItemWithDefaults instantiates a new UnibeeApiMerchantPaymentItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnibeeApiMerchantPaymentItemWithDefaults() *UnibeeApiMerchantPaymentItem {
	this := UnibeeApiMerchantPaymentItem{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnibeeApiMerchantPaymentItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnibeeApiMerchantPaymentItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnibeeApiMerchantPaymentItem) SetDescription(v string) {
	o.Description = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *UnibeeApiMerchantPaymentItem) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *UnibeeApiMerchantPaymentItem) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *UnibeeApiMerchantPaymentItem) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetProductUrl returns the ProductUrl field value if set, zero value otherwise.
func (o *UnibeeApiMerchantPaymentItem) GetProductUrl() string {
	if o == nil || IsNil(o.ProductUrl) {
		var ret string
		return ret
	}
	return *o.ProductUrl
}

// GetProductUrlOk returns a tuple with the ProductUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetProductUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProductUrl) {
		return nil, false
	}
	return o.ProductUrl, true
}

// HasProductUrl returns a boolean if a field has been set.
func (o *UnibeeApiMerchantPaymentItem) HasProductUrl() bool {
	if o != nil && !IsNil(o.ProductUrl) {
		return true
	}

	return false
}

// SetProductUrl gets a reference to the given string and assigns it to the ProductUrl field.
func (o *UnibeeApiMerchantPaymentItem) SetProductUrl(v string) {
	o.ProductUrl = &v
}

// GetQuantity returns the Quantity field value
func (o *UnibeeApiMerchantPaymentItem) GetQuantity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetQuantityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *UnibeeApiMerchantPaymentItem) SetQuantity(v int64) {
	o.Quantity = v
}

// GetTaxScale returns the TaxScale field value
func (o *UnibeeApiMerchantPaymentItem) GetTaxScale() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TaxScale
}

// GetTaxScaleOk returns a tuple with the TaxScale field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetTaxScaleOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxScale, true
}

// SetTaxScale sets field value
func (o *UnibeeApiMerchantPaymentItem) SetTaxScale(v int64) {
	o.TaxScale = v
}

// GetUnitAmountExcludingTax returns the UnitAmountExcludingTax field value
func (o *UnibeeApiMerchantPaymentItem) GetUnitAmountExcludingTax() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UnitAmountExcludingTax
}

// GetUnitAmountExcludingTaxOk returns a tuple with the UnitAmountExcludingTax field value
// and a boolean to check if the value has been set.
func (o *UnibeeApiMerchantPaymentItem) GetUnitAmountExcludingTaxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitAmountExcludingTax, true
}

// SetUnitAmountExcludingTax sets field value
func (o *UnibeeApiMerchantPaymentItem) SetUnitAmountExcludingTax(v int64) {
	o.UnitAmountExcludingTax = v
}

func (o UnibeeApiMerchantPaymentItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnibeeApiMerchantPaymentItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	if !IsNil(o.ProductUrl) {
		toSerialize["productUrl"] = o.ProductUrl
	}
	toSerialize["quantity"] = o.Quantity
	toSerialize["taxScale"] = o.TaxScale
	toSerialize["unitAmountExcludingTax"] = o.UnitAmountExcludingTax
	return toSerialize, nil
}

func (o *UnibeeApiMerchantPaymentItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"taxScale",
		"unitAmountExcludingTax",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnibeeApiMerchantPaymentItem := _UnibeeApiMerchantPaymentItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnibeeApiMerchantPaymentItem)

	if err != nil {
		return err
	}

	*o = UnibeeApiMerchantPaymentItem(varUnibeeApiMerchantPaymentItem)

	return err
}

type NullableUnibeeApiMerchantPaymentItem struct {
	value *UnibeeApiMerchantPaymentItem
	isSet bool
}

func (v NullableUnibeeApiMerchantPaymentItem) Get() *UnibeeApiMerchantPaymentItem {
	return v.value
}

func (v *NullableUnibeeApiMerchantPaymentItem) Set(val *UnibeeApiMerchantPaymentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUnibeeApiMerchantPaymentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUnibeeApiMerchantPaymentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnibeeApiMerchantPaymentItem(val *UnibeeApiMerchantPaymentItem) *NullableUnibeeApiMerchantPaymentItem {
	return &NullableUnibeeApiMerchantPaymentItem{value: val, isSet: true}
}

func (v NullableUnibeeApiMerchantPaymentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnibeeApiMerchantPaymentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


